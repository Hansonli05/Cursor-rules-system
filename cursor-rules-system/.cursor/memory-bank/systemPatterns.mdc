---
description: System architecture and design patterns
globs: 
alwaysApply: true
---

# System Patterns

## Architecture Overview
### High-Level Architecture
[Describe your system's overall architecture - e.g., client-server, microservices, monolith, etc.]

### Core Components
- **[Component 1]**: [Purpose and responsibilities]
- **[Component 2]**: [Purpose and responsibilities]
- **[Component 3]**: [Purpose and responsibilities]

### System Boundaries
- **Internal Systems**: [Components you control]
- **External Systems**: [Third-party services, APIs]
- **Integration Points**: [How components communicate]

## Key Design Patterns
### Architectural Patterns
- **[Pattern 1]**: [When and how it's used]
  - **Context**: [Why this pattern was chosen]
  - **Implementation**: [How it's implemented in your system]

- **[Pattern 2]**: [When and how it's used]
  - **Context**: [Why this pattern was chosen]
  - **Implementation**: [How it's implemented in your system]

### Code Patterns
- **[Code Pattern 1]**: [Description]
  - **Usage**: [When to apply this pattern]
  - **Example**: [Brief example or reference]

- **[Code Pattern 2]**: [Description]
  - **Usage**: [When to apply this pattern]
  - **Example**: [Brief example or reference]

## Data Flow
### Primary Data Flows
1. **[Flow Name 1]**: [Source] → [Processing] → [Destination]
2. **[Flow Name 2]**: [Source] → [Processing] → [Destination]

### State Management
- **Global State**: [How global state is managed]
- **Local State**: [Patterns for component state]
- **Persistence**: [How data is persisted]

## Security Patterns
- **Authentication**: [How users are authenticated]
- **Authorization**: [How permissions are managed]
- **Data Protection**: [How sensitive data is protected]
- **API Security**: [How APIs are secured]

## Performance Patterns
- **Caching Strategy**: [How caching is implemented]
- **Loading Patterns**: [How data loading is optimized]
- **Optimization Strategies**: [Key performance optimizations]

## Error Handling
- **Error Boundaries**: [How errors are contained]
- **Logging Strategy**: [How errors are logged and monitored]
- **User Error Experience**: [How errors are presented to users]
- **Recovery Patterns**: [How the system recovers from errors]

## Testing Patterns
- **Testing Strategy**: [Overall approach to testing]
- **Unit Testing**: [Patterns for unit tests]
- **Integration Testing**: [How components are tested together]
- **End-to-End Testing**: [User journey testing approach]

## Deployment Patterns
- **Environment Strategy**: [Development, staging, production setup]
- **Deployment Process**: [How code moves to production]
- **Rollback Strategy**: [How to handle deployment issues]
- **Monitoring**: [How system health is monitored]

## Key Technical Decisions
### Decision Log
- **[Decision 1]**: [What was decided and why]
  - **Date**: [When decision was made]
  - **Context**: [Why this decision was needed]
  - **Alternatives Considered**: [Other options evaluated]
  - **Impact**: [How this affects the system]

- **[Decision 2]**: [What was decided and why]
  - **Date**: [When decision was made]
  - **Context**: [Why this decision was needed]
  - **Alternatives Considered**: [Other options evaluated]
  - **Impact**: [How this affects the system]

## Cross-Cutting Concerns
- **Logging**: [How logging is handled across the system]
- **Configuration**: [How configuration is managed]
- **Monitoring**: [How system metrics are collected]
- **Documentation**: [How code and architecture are documented]

---

**Note**: This file captures the "why" behind architectural decisions. Update when making significant architectural changes or when patterns evolve.